var documenterSearchIndex = {"docs":
[{"location":"api/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"api/#Modules","page":"API Reference","title":"Modules","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"ClassicCiphers.ClassicCiphers\nClassicCiphers.Alphabet\nClassicCiphers.Ciphers\nClassicCiphers.Traits","category":"page"},{"location":"api/#ClassicCiphers.ClassicCiphers","page":"API Reference","title":"ClassicCiphers.ClassicCiphers","text":"ClassicCiphers is a Julia module that implements various classical cryptographic ciphers.\n\nThis module provides functionality for encrypting and decrypting messages using traditional cryptographic methods that were historically used before modern cryptography.\n\nWhile these ciphers are not secure for modern use, they are valuable for educational purposes and understanding the fundamentals of cryptography.\n\n\n\n\n\n","category":"module"},{"location":"api/#ClassicCiphers.Alphabet","page":"API Reference","title":"ClassicCiphers.Alphabet","text":"Alphabet\n\nA module containing alphabet-related functionality for classic ciphers.\n\nThis module provides various utilities and constants for handling alphabets in cryptographic operations, particularly for classic cipher implementations.\n\n\n\n\n\n","category":"module"},{"location":"api/#ClassicCiphers.Ciphers","page":"API Reference","title":"ClassicCiphers.Ciphers","text":"A module containing classic cipher implementations for text encryption and decryption.\n\nThis module provides functions to work with various historical and classic ciphers, allowing users to encrypt and decrypt text using different cipher algorithms.\n\nModule Contents\n\nCipher implementation functions\nEncryption and decryption utilities\nHelper functions for cipher operations\n\n\n\n\n\n","category":"module"},{"location":"api/#ClassicCiphers.Traits","page":"API Reference","title":"ClassicCiphers.Traits","text":"module Traits\n\nA module containing type traits for classification and operations on classical ciphers.\n\nThis module provides a system of traits to define and categorize different types of classical cryptographic ciphers, their characteristics, and operations.\n\n\n\n\n\n","category":"module"},{"location":"api/#Alphabet","page":"API Reference","title":"Alphabet","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"ClassicCiphers.Alphabet.AlphabetParameters","category":"page"},{"location":"api/#ClassicCiphers.Alphabet.AlphabetParameters","page":"API Reference","title":"ClassicCiphers.Alphabet.AlphabetParameters","text":"AlphabetParameters: Configuration for alphabet handling\n\nFields:\n\nalphabet: Set of valid characters\n\n\n\n\n\n","category":"type"},{"location":"api/#Constants","page":"API Reference","title":"Constants","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"ClassicCiphers.Alphabet.UPPERCASE_LETTERS\nClassicCiphers.Alphabet.LOWERCASE_LETTERS\nClassicCiphers.Alphabet.DIGITS_LETTERS","category":"page"},{"location":"api/#ClassicCiphers.Alphabet.UPPERCASE_LETTERS","page":"API Reference","title":"ClassicCiphers.Alphabet.UPPERCASE_LETTERS","text":"UPPERCASE_LETTERS\n\nStandard uppercase Latin alphabet (A-Z).\n\n\n\n\n\n","category":"constant"},{"location":"api/#ClassicCiphers.Alphabet.LOWERCASE_LETTERS","page":"API Reference","title":"ClassicCiphers.Alphabet.LOWERCASE_LETTERS","text":"LOWERCASE_LETTERS\n\nStandard lowercase Latin alphabet (a-z).\n\n\n\n\n\n","category":"constant"},{"location":"api/#ClassicCiphers.Alphabet.DIGITS_LETTERS","page":"API Reference","title":"ClassicCiphers.Alphabet.DIGITS_LETTERS","text":"DIGITS_LETTERS\n\nNumeric digits (0-9).\n\n\n\n\n\n","category":"constant"},{"location":"api/#Abstract-Types","page":"API Reference","title":"Abstract Types","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"ClassicCiphers.AbstractCipher\nClassicCiphers.AbstractStreamCipherConfiguration\nClassicCiphers.Ciphers.AbstractCipherState","category":"page"},{"location":"api/#ClassicCiphers.AbstractCipher","page":"API Reference","title":"ClassicCiphers.AbstractCipher","text":"AbstractCipher{ACTION}\n\nAbstract type for all ciphers in the package.\n\nType parameters\n\nACTION::Bool: true for encryption, false for decryption\n\n\n\n\n\n","category":"type"},{"location":"api/#ClassicCiphers.AbstractStreamCipherConfiguration","page":"API Reference","title":"ClassicCiphers.AbstractStreamCipherConfiguration","text":"AbstractStreamCipherConfiguration{ACTION} <: AbstractCipher{ACTION}\n\nAbstract type for ciphers that process text as a continuous stream of characters.\n\n\n\n\n\n","category":"type"},{"location":"api/#ClassicCiphers.Ciphers.AbstractCipherState","page":"API Reference","title":"ClassicCiphers.Ciphers.AbstractCipherState","text":"abstract type AbstractCipherState end\n\nBase abstract type for representing the internal state of a cipher. This type serves as the parent type for all concrete cipher state implementations.\n\nAll subtypes should maintain the necessary state information required for encryption and decryption operations in stream ciphers.\n\nExtended help\n\nImplementation\n\nWhen implementing a new cipher state type:\n\nCreate a concrete type that inherits from AbstractCipherState\nDefine necessary fields to store the cipher's internal state\nImplement required methods for state manipulation\n\n\n\n\n\n","category":"type"},{"location":"api/#Cipher-state","page":"API Reference","title":"Cipher state","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"ClassicCiphers.Ciphers.State\nClassicCiphers.Ciphers.EmptyCipherState\nClassicCiphers.Ciphers.ValidCharCount","category":"page"},{"location":"api/#ClassicCiphers.Ciphers.State","page":"API Reference","title":"ClassicCiphers.Ciphers.State","text":"State(cipher::AbstractStreamCipherConfiguration)\n\nCreate an initial empty cipher state for a given stream cipher configuration.\n\nArguments\n\ncipher::AbstractStreamCipherConfiguration: The configuration of the stream cipher\n\nReturns\n\nEmptyCipherState: An empty cipher state instance\n\nThis function serves as a default implementation for stream ciphers that don't require state initialization. For ciphers that need specific state initialization, this method should be overridden.\n\n\n\n\n\nState(cipher::FormattingCipher)\n\nCreate initial state for formatting cipher operation. Returns a new FormattingState instance to track character accumulation.\n\n\n\n\n\n","category":"function"},{"location":"api/#ClassicCiphers.Ciphers.EmptyCipherState","page":"API Reference","title":"ClassicCiphers.Ciphers.EmptyCipherState","text":"EmptyCipherState <: AbstractCipherState\n\nA concrete implementation of AbstractCipherState representing an empty cipher state.\n\nThis struct is used as a null object pattern for cipher states when no state information  needs to be maintained during encryption/decryption operations.\n\n\n\n\n\n","category":"type"},{"location":"api/#ClassicCiphers.Ciphers.ValidCharCount","page":"API Reference","title":"ClassicCiphers.Ciphers.ValidCharCount","text":"A mutable struct representing character count tracking for stream ciphers.\n\nImplements the AbstractCipherState interface to maintain state information about valid characters encountered during encryption/decryption operations.\n\n\n\n\n\n","category":"type"},{"location":"api/#Case-Handling","page":"API Reference","title":"Case Handling","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"ClassicCiphers.Traits.InputCaseMode\nClassicCiphers.Traits.OutputCaseMode\nClassicCiphers.Traits.InputCaseHandler\nClassicCiphers.Traits.CaseHandler\n\nClassicCiphers.Traits.case_sensitive\nClassicCiphers.Traits.not_case_sensitive\nClassicCiphers.Traits.iscasesensitive\n\nClassicCiphers.Traits.preserve_case\nClassicCiphers.Traits.is_preserve\n\nClassicCiphers.Traits.lowercase_case\nClassicCiphers.Traits.is_lowercase\n\nClassicCiphers.Traits.uppercase_case\nClassicCiphers.Traits.is_uppercase\n\nClassicCiphers.Traits.cccase\nClassicCiphers.Traits.is_cccase\n\nClassicCiphers.Traits.default_case\nClassicCiphers.Traits.is_default\n\nClassicCiphers.Traits.apply_case","category":"page"},{"location":"api/#ClassicCiphers.Traits.InputCaseMode","page":"API Reference","title":"ClassicCiphers.Traits.InputCaseMode","text":"InputCaseMode\n\nEnumeration of input case handling modes.\n\nValues\n\nNOT_CASE_SENSITIVE: Treat upper/lowercase as same (default)\nCASE_SENSITIVE: Distinguish between upper/lowercase\n\n\n\n\n\n","category":"type"},{"location":"api/#ClassicCiphers.Traits.OutputCaseMode","page":"API Reference","title":"ClassicCiphers.Traits.OutputCaseMode","text":"OutputCaseMode\n\nEnumeration for output case handling modes.\n\n\n\n\n\n","category":"type"},{"location":"api/#ClassicCiphers.Traits.InputCaseHandler","page":"API Reference","title":"ClassicCiphers.Traits.InputCaseHandler","text":"InputCaseHandler{M} <: InputCaseHandlingTrait\n\nTrait type for handling input case sensitivity.\n\nType parameters\n\nM: Type of case mode (usually InputCaseMode)\n\nFields\n\nmode::M: The case handling mode to use\n\n\n\n\n\n","category":"type"},{"location":"api/#ClassicCiphers.Traits.CaseHandler","page":"API Reference","title":"ClassicCiphers.Traits.CaseHandler","text":"CaseHandler{M} <: OutputCaseHandlingTrait\n\nConcrete handler for output case transformations.\n\nType parameters\n\nM: Type of case mode (usually OutputCaseMode)\n\n\n\n\n\n","category":"type"},{"location":"api/#ClassicCiphers.Traits.case_sensitive","page":"API Reference","title":"ClassicCiphers.Traits.case_sensitive","text":"case_sensitive()\n\nCreate an InputCaseHandler that distinguishes between uppercase and lowercase letters.\n\nReturns\n\nInputCaseHandler{InputCaseMode}: Handler with CASE_SENSITIVE mode\n\n\n\n\n\n","category":"function"},{"location":"api/#ClassicCiphers.Traits.not_case_sensitive","page":"API Reference","title":"ClassicCiphers.Traits.not_case_sensitive","text":"not_case_sensitive()\n\nCreate an InputCaseHandler that treats uppercase and lowercase letters as equivalent.\n\nReturns\n\nInputCaseHandler{InputCaseMode}: Handler with NOT_CASE_SENSITIVE mode\n\nSee Also\n\nInputCaseMode\ncase_sensitive\n\n\n\n\n\n","category":"function"},{"location":"api/#ClassicCiphers.Traits.iscasesensitive","page":"API Reference","title":"ClassicCiphers.Traits.iscasesensitive","text":"iscasesensitive(handler::InputCaseHandler)\n\nCheck if an input case handler distinguishes between uppercase and lowercase letters.\n\nArguments\n\nhandler::InputCaseHandler: The case handler to check\n\nReturns\n\nBool: true if handler is case sensitive, false otherwise\n\nSee Also\n\nInputCaseMode\ncase_sensitive\nnot_case_sensitive\n\n\n\n\n\n","category":"function"},{"location":"api/#ClassicCiphers.Traits.preserve_case","page":"API Reference","title":"ClassicCiphers.Traits.preserve_case","text":"Returns a CaseHandler instance configured to preserve the case of characters during cipher operations.\n\nThis means the output will maintain the same case (uppercase/lowercase) as the input text.\n\nReturns\n\nCaseHandler: A case handling object with PRESERVE_CASE behavior\n\n\n\n\n\n","category":"function"},{"location":"api/#ClassicCiphers.Traits.is_preserve","page":"API Reference","title":"ClassicCiphers.Traits.is_preserve","text":"is_preserve(handler::CaseHandler) -> Bool\n\nCheck if a CaseHandler is configured to preserve the original case of characters.\n\nReturns true if the handler's mode is set to preserve case, false otherwise.\n\nArguments\n\nhandler::CaseHandler: The case handler object to check\n\n\n\n\n\n","category":"function"},{"location":"api/#ClassicCiphers.Traits.lowercase_case","page":"API Reference","title":"ClassicCiphers.Traits.lowercase_case","text":"lowercase_case()\n\nCreate a CaseHandler instance that converts text to lowercase.\n\nReturns\n\nCaseHandler: A case handler that processes text to ensure all characters are lowercase.\n\n\n\n\n\n","category":"function"},{"location":"api/#ClassicCiphers.Traits.is_lowercase","page":"API Reference","title":"ClassicCiphers.Traits.is_lowercase","text":"is_lowercase(handler::CaseHandler) -> Bool\n\nCheck if the case mode of the handler is set to lowercase.\n\nArguments\n\nhandler::CaseHandler: The case handler to check\n\nReturns\n\ntrue if the handler's mode is lowercase, false otherwise.\n\n\n\n\n\n","category":"function"},{"location":"api/#ClassicCiphers.Traits.uppercase_case","page":"API Reference","title":"ClassicCiphers.Traits.uppercase_case","text":"uppercase_case()\n\nCreate a CaseHandler instance set to handle uppercase text output.\n\nReturns\n\nCaseHandler: A case handler configured to convert output text to uppercase.\n\n\n\n\n\n","category":"function"},{"location":"api/#ClassicCiphers.Traits.is_uppercase","page":"API Reference","title":"ClassicCiphers.Traits.is_uppercase","text":"is_uppercase(handler::CaseHandler) -> Bool\n\nCheck if the CaseHandler is set to uppercase mode.\n\nReturns true if the handler's mode is set to UPPERCASE_CASE, false otherwise.\n\nArguments\n\nhandler::CaseHandler: The case handler to check\n\nReturns\n\nBool: true if uppercase mode is set, false otherwise\n\n\n\n\n\n","category":"function"},{"location":"api/#ClassicCiphers.Traits.cccase","page":"API Reference","title":"ClassicCiphers.Traits.cccase","text":"cccase()\n\nCreate a CaseHandler instance with the standard common case format (CCCASE).\n\nReturns a CaseHandler object that maintains the case format of cryptographic operations using the common case convention.\n\n\n\n\n\n","category":"function"},{"location":"api/#ClassicCiphers.Traits.is_cccase","page":"API Reference","title":"ClassicCiphers.Traits.is_cccase","text":"is_cccase(handler::CaseHandler) -> Bool\n\nCheck if the given case handler uses 'CCCASE' mode.\n\nReturns true if the case handler's mode is set to CCCASE, false otherwise.\n\nArguments\n\nhandler::CaseHandler: The case handler object to check.\n\n\n\n\n\n","category":"function"},{"location":"api/#ClassicCiphers.Traits.default_case","page":"API Reference","title":"ClassicCiphers.Traits.default_case","text":"default_case()\n\nCreate a CaseHandler with the default case settings.\n\nReturns a CaseHandler initialized with DEFAULT_CASE, which determines the letter case handling behavior for text processing operations.\n\nReturns\n\nCaseHandler: A new case handler instance with default case settings.\n\n\n\n\n\n","category":"function"},{"location":"api/#ClassicCiphers.Traits.is_default","page":"API Reference","title":"ClassicCiphers.Traits.is_default","text":"is_default(handler::CaseHandler) -> Bool\n\nCheck if a case handler is in default case mode.\n\nArguments\n\nhandler::CaseHandler: The case handler to check.\n\nReturns\n\nBool: true if the case handler is in default case mode, false otherwise.\n\n\n\n\n\n","category":"function"},{"location":"api/#ClassicCiphers.Traits.apply_case","page":"API Reference","title":"ClassicCiphers.Traits.apply_case","text":"apply_case(handler::CaseHandler, plain_char::Char, base_char::Char, enc::Bool)\n\nApplies the case transformation to a character based on the provided CaseHandler.\n\nArguments\n\nhandler::CaseHandler: The case handler that defines how the case transformation should be applied.\nplain_char::Char: The character to which the case transformation will be applied.\nbase_char::Char: The base character used to determine the case transformation.\nenc::Bool: A boolean flag indicating whether the transformation is for encoding (true) or decoding (false).\n\nReturns\n\nChar: The character after applying the case transformation.\n\n\n\n\n\n","category":"function"},{"location":"api/#Unknown-Symbol-Handling","page":"API Reference","title":"Unknown Symbol Handling","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"ClassicCiphers.Traits.UnknownSymbolHandlingTrait\nClassicCiphers.Traits.UnknownSymbolMode\nClassicCiphers.Traits.SymbolHandler\n\nClassicCiphers.Traits.ignore_symbol\nClassicCiphers.Traits.is_ignore\n\nClassicCiphers.Traits.remove_symbol\nClassicCiphers.Traits.is_remove\n\nClassicCiphers.Traits.replace_symbol\nClassicCiphers.Traits.is_replace\n\nClassicCiphers.Traits.transform_symbol","category":"page"},{"location":"api/#ClassicCiphers.Traits.UnknownSymbolHandlingTrait","page":"API Reference","title":"ClassicCiphers.Traits.UnknownSymbolHandlingTrait","text":"UnknownSymbolHandlingTrait <: CipherTrait\n\nAbstract type representing the handling behavior for unknown symbols in cipher operations.\n\nThis trait defines how a cipher should process symbols that are not part of its defined alphabet or symbol set. Concrete subtypes should specify specific handling strategies, such as ignoring, throwing errors, or substituting with default values.\n\nType Hierarchy\n\nSupertype: CipherTrait\n\nExtended By\n\nConcrete implementations should extend this type to define specific handling behaviors.\n\n\n\n\n\n","category":"type"},{"location":"api/#ClassicCiphers.Traits.UnknownSymbolMode","page":"API Reference","title":"ClassicCiphers.Traits.UnknownSymbolMode","text":"UnknownSymbolMode\n\nEnumeration type defining possible modes for handling unknown symbols during cipher operations.\n\nThis enum specifies how the cipher should behave when encountering symbols that are not part of the defined cipher alphabet or symbol set.\n\n\n\n\n\n","category":"type"},{"location":"api/#ClassicCiphers.Traits.SymbolHandler","page":"API Reference","title":"ClassicCiphers.Traits.SymbolHandler","text":"SymbolHandler{M} <: UnknownSymbolHandlingTrait\n\nA type that defines how unknown symbols should be handled during encryption/decryption operations.\n\nThe type parameter M specifies the mode of handling unknown symbols.\n\nType Parameters\n\nM: The mode of handling unknown symbols (e.g., error, ignore, replace)\n\nInheritance\n\nSubtype of UnknownSymbolHandlingTrait\n\n\n\n\n\n","category":"type"},{"location":"api/#ClassicCiphers.Traits.ignore_symbol","page":"API Reference","title":"ClassicCiphers.Traits.ignore_symbol","text":"ignore_symbol()\n\nReturn a SymbolHandler instance configured to ignore symbols during cipher operations.\n\nThe returned handler is initialized with the IGNORE_SYMBOL constant, which defines the behavior of ignoring non-alphabetic characters in the text being processed.\n\nReturns\n\nSymbolHandler: A handler instance configured for symbol ignoring behavior\n\n\n\n\n\n","category":"function"},{"location":"api/#ClassicCiphers.Traits.is_ignore","page":"API Reference","title":"ClassicCiphers.Traits.is_ignore","text":"is_ignore(handler::SymbolHandler)\n\nReturns true if the SymbolHandler is set to ignore symbols, false otherwise.\n\nWhen a handler is in ignore mode, it will pass through unknown symbols without modification during cipher operations.\n\nArguments\n\nhandler::SymbolHandler: The symbol handler to check.\n\nReturns\n\nBool: true if the handler's mode is set to IGNORE_SYMBOL, false otherwise.\n\n\n\n\n\n","category":"function"},{"location":"api/#ClassicCiphers.Traits.remove_symbol","page":"API Reference","title":"ClassicCiphers.Traits.remove_symbol","text":"remove_symbol()\n\nCreate a SymbolHandler that removes symbols from text.\n\nReturns a SymbolHandler instance configured to remove symbols during encryption or decryption operations.\n\nReturns\n\nSymbolHandler: A symbol handler configured to remove symbols from text\n\n\n\n\n\n","category":"function"},{"location":"api/#ClassicCiphers.Traits.is_remove","page":"API Reference","title":"ClassicCiphers.Traits.is_remove","text":"is_remove(handler::SymbolHandler) -> Bool\n\nCheck if the mode of the SymbolHandler is set to remove symbols.\n\nReturns\n\ntrue if the handler's mode is set to remove symbols\nfalse otherwise\n\n\n\n\n\n","category":"function"},{"location":"api/#ClassicCiphers.Traits.replace_symbol","page":"API Reference","title":"ClassicCiphers.Traits.replace_symbol","text":"replace_symbol()\n\nCreate a SymbolHandler with the REPLACE_SYMBOL strategy for handling symbols in text processing.\n\nThis function returns a SymbolHandler object configured to replace symbols according to the predefined REPLACE_SYMBOL behavior.\n\nReturns\n\nSymbolHandler: A new symbol handler instance with replace strategy\n\n\n\n\n\n","category":"function"},{"location":"api/#ClassicCiphers.Traits.is_replace","page":"API Reference","title":"ClassicCiphers.Traits.is_replace","text":"is_replace(handler::SymbolHandler) -> Bool\n\nCheck if the SymbolHandler's mode is set to replace symbols.\n\nReturns true if the handler's mode is REPLACE_SYMBOL, false otherwise.\n\n\n\n\n\n","category":"function"},{"location":"api/#ClassicCiphers.Traits.transform_symbol","page":"API Reference","title":"ClassicCiphers.Traits.transform_symbol","text":"transform_symbol(handler::SymbolHandler, plain_char::Char)\n\nTransform a single plain character using the provided SymbolHandler.\n\nArguments\n\nhandler::SymbolHandler: The handler responsible for symbol transformation\nplain_char::Char: The character to be transformed\n\nReturns\n\nA transformed character based on the handler's transformation rules.\n\n\n\n\n\n","category":"function"},{"location":"api/#Cipher-Traits","page":"API Reference","title":"Cipher Traits","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"ClassicCiphers.Traits.CipherTrait\nClassicCiphers.Traits.CipherTypeTrait\nClassicCiphers.Traits.SubstitutionTrait\nClassicCiphers.Traits.ShiftSubstitution","category":"page"},{"location":"api/#ClassicCiphers.Traits.CipherTrait","page":"API Reference","title":"ClassicCiphers.Traits.CipherTrait","text":"abstract type CipherTrait end\n\nA base abstract type representing cipher traits in the ClassicCiphers package.\n\nThis type serves as the root of the cipher trait type hierarchy, allowing for type-based dispatch and classification of different cipher algorithms and their characteristics.\n\nExtended help\n\nSubtypes of CipherTrait should represent specific properties or behaviors of cipher algorithms, enabling type-based dispatch for encryption and decryption operations.\n\n\n\n\n\n","category":"type"},{"location":"api/#ClassicCiphers.Traits.CipherTypeTrait","page":"API Reference","title":"ClassicCiphers.Traits.CipherTypeTrait","text":"An abstract type representing cipher categories.\n\nCipherTypeTrait serves as a base type for traits that classify different types of ciphers. This trait hierarchy is used for dispatch and categorization of cipher algorithms.\n\n\n\n\n\n","category":"type"},{"location":"api/#ClassicCiphers.Traits.SubstitutionTrait","page":"API Reference","title":"ClassicCiphers.Traits.SubstitutionTrait","text":"SubstitutionTrait <: CipherTypeTrait\n\nA trait type representing substitution ciphers.\n\nThis abstract type is used to classify ciphers that operate by substituting one character for another according to a defined pattern or key. It is a subtype of CipherTypeTrait, which is the base trait for all cipher type classifications.\n\n\n\n\n\n","category":"type"},{"location":"api/#ClassicCiphers.Traits.ShiftSubstitution","page":"API Reference","title":"ClassicCiphers.Traits.ShiftSubstitution","text":"ShiftSubstitution <: SubstitutionTrait\n\nA trait type representing shift substitution ciphers.\n\nShift substitution is a type of substitution cipher where each letter in the plaintext  is shifted a certain number of positions in the alphabet. The most famous example  is the Caesar cipher, which uses a shift of 3.\n\n\n\n\n\n","category":"type"},{"location":"api/#Handling-Traits","page":"API Reference","title":"Handling Traits","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"ClassicCiphers.Traits.InputCaseHandlingTrait\nClassicCiphers.Traits.OutputCaseHandlingTrait","category":"page"},{"location":"api/#ClassicCiphers.Traits.InputCaseHandlingTrait","page":"API Reference","title":"ClassicCiphers.Traits.InputCaseHandlingTrait","text":"InputCaseHandlingTrait <: CipherTrait\n\nAbstract type for traits that control how ciphers handle letter case in input text.\n\n\n\n\n\n","category":"type"},{"location":"api/#ClassicCiphers.Traits.OutputCaseHandlingTrait","page":"API Reference","title":"ClassicCiphers.Traits.OutputCaseHandlingTrait","text":"OutputCaseHandlingTrait <: CipherTrait\n\nAbstract type for traits controlling output case handling.\n\n\n\n\n\n","category":"type"},{"location":"api/#Core-Functions","page":"API Reference","title":"Core Functions","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"ClassicCiphers.Ciphers.inv\nClassicCiphers.Ciphers.transform_index","category":"page"},{"location":"api/#Base.inv","page":"API Reference","title":"Base.inv","text":"inv(cipher::FormattingCipher{ENC}) where {ENC}\n\nCreate an inverse formatting cipher that removes the formatting applied by the original cipher.\n\nReturns\n\nFormattingCipher{!ENC}: A new formatting cipher for unformatting\n\nExamples\n\n# Create cipher and inverse\nformatter = FormattingCipher()\nunformatter = inv(formatter)\n\n# They cancel each other out\nmessage = \"SECRETMESSAGE\"\nformatted = formatter(message)    # \"SECRE TMESS AGE\"\nunformatted = unformatter(formatted)  # \"SECRETMESSAGE\"\n\n\n\n\n\ninv(cipher::SubstitutionCipher{ENC}) where {ENC}\n\nCreate an inverse substitution cipher by reversing the character mapping.\n\nThe inverse cipher:\n\nSwaps each key-value pair in the mapping dictionary\nPreserves alphabet parameters\nToggles the encryption flag\n\nArguments\n\ncipher::SubstitutionCipher{ENC}: The cipher to invert\n\nReturns\n\nSubstitutionCipher{!ENC}: A new substitution cipher with reversed mapping\n\nExamples\n\n# Create cipher and inverse\nmapping = Dict('A'=>'X', 'B'=>'Y', 'C'=>'Z')\ncipher = SubstitutionCipher(mapping)\ndecipher = inv(cipher)\n\n# They cancel each other out\nmessage = \"ABC\"\nencrypted = cipher(message)    # \"XYZ\"\ndecrypted = decipher(encrypted) # \"ABC\"\n\n\n\n\n\ninv(cipher::ROT13Cipher{ENC}) where {ENC}\n\nCreate an inverse ROT13 cipher. Since ROT13 is self-inverse (shifting by 13 twice returns  to the original position), the inverse only toggles the encryption flag while keeping the  same shift.\n\nArguments\n\ncipher::ROT13Cipher{ENC}: The cipher to invert\n\nReturns\n\nROT13Cipher{!ENC}: A new ROT13 cipher with toggled encryption flag\n\nExamples\n\n# Create cipher and inverse\ncipher = ROT13Cipher()\ndecipher = inv(cipher)\n\n# Both perform the same transformation\nmessage = \"HELLO\"\nc1 = cipher(message)     # \"URYYB\"\nc2 = decipher(message)   # \"URYYB\"\n\n# Applying either twice returns original\ncipher(cipher(message))  # \"HELLO\"\n\n\n\n\n\ninv(cipher::CaesarCipher{ENC}) where {ENC}\n\nCreate an inverse cipher that decrypts messages encrypted with the original cipher.\n\nThe inverse cipher:\n\nReverses the shift direction (-shift)\nToggles the encryption flag\nKeeps the same alphabet parameters\n\nArguments\n\ncipher::CaesarCipher{ENC}: The cipher to invert\n\nReturns\n\nCaesarCipher{!ENC}: A new Caesar cipher that decrypts messages encrypted with the input cipher\n\nExamples\n\n# Create a cipher and its inverse\ncipher = CaesarCipher(shift=3)\ndecipher = inv(cipher)\n\n# They cancel each other out\nmessage = \"HELLO\"\nencrypted = cipher(message)    # \"KHOOR\"\ndecrypted = decipher(encrypted) # \"HELLO\"\n\n\n\n\n\ninv(cipher::AffineCipher{ENC}) where {ENC}\n\nCreate an inverse cipher that decrypts messages encrypted with the original cipher.\n\nThe inverse cipher:\n\nUses the modular multiplicative inverse of 'a'\nAdjusts the shift parameter accordingly\nPreserves alphabet parameters\n\nArguments\n\ncipher::AffineCipher{ENC}: The cipher to invert\n\nReturns\n\nAffineCipher{!ENC}: A new affine cipher for decryption\n\nExamples\n\n# Create cipher and inverse\ncipher = AffineCipher(a=5, b=8)\ndecipher = inv(cipher)\n\n# They cancel each other out\nmessage = \"HELLO\"\nencrypted = cipher(message)\ndecrypted = decipher(encrypted) # Returns \"HELLO\"\n\n\n\n\n\ninv(cipher::XORCipher{ENC, T}) where {ENC, T}\n\nCreate an inverse XOR cipher. Since XOR is its own inverse, this only toggles  the encryption flag while keeping the same key.\n\nReturns\n\nXORCipher{!ENC, T}: A new XOR cipher with toggled encryption flag\n\n\n\n\n\ninv(cipher::VigenereCipher{ENC}) where {ENC}\n\nCreate an inverse Vigenère cipher by keeping the same key but toggling encryption mode.\n\nThe inverse cipher:\n\nUses the same key\nToggles the encryption flag\nKeeps the same alphabet parameters\n\nArguments\n\ncipher::VigenereCipher{ENC}: The cipher to invert\n\nReturns\n\nVigenereCipher{!ENC}: A new Vigenère cipher for decryption\n\nExamples\n\n# Create cipher and inverse\ncipher = VigenereCipher(\"SECRET\")\ndecipher = inv(cipher)\n\n# They cancel each other out\nmessage = \"HELLO\"\nencrypted = cipher(message)\ndecrypted = decipher(encrypted) # Returns \"HELLO\"\n\n\n\n\n\ninv(cipher::VernamCipher{ENC}) where {ENC}\n\nCreates and returns a new Vernam cipher that is the inverse operation of the input cipher. For a Vernam cipher, the inverse operation uses the same key but with opposite encryption direction (encryption ↔ decryption).\n\nArguments\n\ncipher::VernamCipher{ENC}: The Vernam cipher to be inverted\n\nReturns\n\nVernamCipher: A new Vernam cipher that performs the inverse operation\n\n\n\n\n\ninv(morse::MorseCode{ENC}) where {ENC}\n\nCreate an inverse Morse code handler that decodes messages encoded with the original handler.\n\nArguments\n\nmorse::MorseCode{ENC}: The Morse code handler to invert\n\nReturns\n\nMorseCode{!ENC}: A new Morse code handler for the opposite operation\n\nExamples\n\n# Create encoder and decoder\nmorse = MorseCode()\ndemorse = inv(morse)\n\n# They perform opposite operations\nmessage = \"HELLO WORLD\"\nencoded = morse(message)     # \".... . .-.. .-.. --- / .-- --- .-. .-.. -..\"\ndecoded = demorse(encoded)   # \"HELLO WORLD\"\n\n\n\n\n\n","category":"function"},{"location":"api/#ClassicCiphers.Ciphers.transform_index","page":"API Reference","title":"ClassicCiphers.Ciphers.transform_index","text":"transform_index(cipher::SubstitutionCipher, index::Int)\n\nTransforms a character index using the substitution mapping defined in the cipher.\n\nArguments\n\ncipher::SubstitutionCipher: The substitution cipher containing the mapping\nindex::Int: The index of the character to transform (1-based indexing)\n\nReturns\n\nThe transformed index according to the cipher's substitution mapping.\n\n\n\n\n\ntransform_index(cipher::CaesarCipher{ENC}, index::Int) where {ENC}\n\nTransform a character position in the alphabet by shifting it according to the cipher's shift value.\n\nType parameters\n\nENC::Bool: true for encryption, false for decryption\n\nArguments\n\ncipher::CaesarCipher{ENC}: The Caesar cipher instance\nindex::Int: Original position in the alphabet (1-based)\n\nReturns\n\nInt: New position after applying the shift (1-based)\n\nExamples\n\ncipher = CaesarCipher(shift=3)\ntransform_index(cipher, 1)  # Returns 4 (A -> D)\ntransform_index(cipher, 26) # Returns 3 (Z -> C)\n\n\n\n\n\ntransform_index(cipher::AffineCipher{ENC}, index::Int) where {ENC}\n\nTransform a character position using the affine transformation E(x) = (ax + b) mod m for encryption or D(x) = a⁻¹(x - b) mod m for decryption.\n\nThe decryption formula uses the modular multiplicative inverse of 'a'.\n\nArguments\n\ncipher::AffineCipher{ENC}: The affine cipher instance\nindex::Int: Original position in the alphabet (1-based)\n\nReturns\n\nInt: New position after applying the transformation (1-based)\n\n\n\n\n\n","category":"function"},{"location":"api/#Stream-API","page":"API Reference","title":"Stream API","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"fit! OnlineStatsBase._fit!","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"ClassicCiphers.Ciphers.AbstractStreamCipher\nClassicCiphers.Ciphers.connect!\nClassicCiphers.Ciphers.fit_listeners!","category":"page"},{"location":"api/#ClassicCiphers.Ciphers.AbstractStreamCipher","page":"API Reference","title":"ClassicCiphers.Ciphers.AbstractStreamCipher","text":"AbstractStreamCipher{T} <: OnlineStat{T}\n\nAbstract type representing a stream cipher that implements the OnlineStat API.\n\nThis type serves as a base for implementing stream ciphers that process data sequentially using the online statistics framework. The type parameter T specifies the type of data being processed by the cipher.\n\nType Parameters\n\nT: The type of data being processed by the cipher\n\n\n\n\n\n","category":"type"},{"location":"api/#ClassicCiphers.Ciphers.connect!","page":"API Reference","title":"ClassicCiphers.Ciphers.connect!","text":"connect!(cipher2::C2, cipher1::C1) where {C2<:AbstractStreamCipher, C1<:AbstractStreamCipher}\n\nConnect two stream ciphers, allowing the output of cipher1 to be sent as input to cipher2.\n\nComment\n\nBe sure to call this function before using the ciphers to ensure proper data flow. By connecting ciphers, you can create complex cipher chains and data processing pipelines. But be careful to avoid circular dependencies or infinite loops.\n\nToDo: using a DAG (Directed Acyclic Graph) to manage the connections should be considered for more complex scenarios.\n\nConsider following discussion: https://github.com/joshday/OnlineStats.jl/issues/272 about OnlineStat chaining\n\n\n\n\n\n","category":"function"},{"location":"api/#ClassicCiphers.Ciphers.fit_listeners!","page":"API Reference","title":"ClassicCiphers.Ciphers.fit_listeners!","text":"fit_listeners!(cipher::O) where {O<:AbstractStreamCipher}\n\nInitialize and attach any required listeners to the given stream cipher implementation. This function should be called before using the cipher to ensure proper event handling.\n\nArguments\n\ncipher::O: A stream cipher instance that implements the AbstractStreamCipher interface\n\nReturns\n\nNothing. Modifies the cipher object in place.\n\nNote\n\nThis is an internal function used to set up event handling for stream ciphers. Specific cipher implementations may override this method to add custom listeners.\n\n\n\n\n\n","category":"function"},{"location":"api/#Cipher-specifics","page":"API Reference","title":"Cipher specifics","text":"","category":"section"},{"location":"api/#Substitution","page":"API Reference","title":"Substitution","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"ClassicCiphers.Ciphers.SubstitutionCipher","category":"page"},{"location":"api/#ClassicCiphers.Ciphers.SubstitutionCipher","page":"API Reference","title":"ClassicCiphers.Ciphers.SubstitutionCipher","text":"SubstitutionCipher{ENC} <: AbstractStreamCipherConfiguration{ENC}\n\nGeneral substitution cipher that maps each character to another using a provided mapping.\n\nType parameters\n\nENC::Bool: true for encryption, false for decryption\n\nFields\n\nmapping::Dict{Char,Char}: Character substitution mapping\nalphabet_params::AlphabetParameters: Configuration for alphabet and case handling\n\n\n\n\n\n","category":"type"},{"location":"api/#Caesar","page":"API Reference","title":"Caesar","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"ClassicCiphers.Ciphers.CaesarCipher","category":"page"},{"location":"api/#ClassicCiphers.Ciphers.CaesarCipher","page":"API Reference","title":"ClassicCiphers.Ciphers.CaesarCipher","text":"CaesarCipher{ENC} <: AbstractStreamCipherConfiguration{ENC}\n\nImplementation of the Caesar cipher that shifts each letter by a fixed amount.\n\nType parameters\n\nENC::Bool: true for encryption, false for decryption\n\nFields\n\nshift::Int: Number of positions to shift letters in the alphabet\nalphabet_params::AlphabetParameters: Configuration for alphabet and case handling\n\n\n\n\n\n","category":"type"},{"location":"api/#ROT13","page":"API Reference","title":"ROT13","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"ClassicCiphers.Ciphers.ROT13Cipher","category":"page"},{"location":"api/#ClassicCiphers.Ciphers.ROT13Cipher","page":"API Reference","title":"ClassicCiphers.Ciphers.ROT13Cipher","text":"ROT13Cipher{ENC} <: AbstractStreamCipherConfiguration{ENC}\n\nROT13 substitution cipher that shifts each letter by 13 positions.\n\nA special case of the Caesar cipher with a fixed shift of 13, making it self-inverse (applying the cipher twice returns the original text).\n\nType parameters\n\nENC::Bool: true for encryption, false for decryption\n\nFields\n\nalphabet_params::AlphabetParameters: Configuration for alphabet and case handling\n\n\n\n\n\n","category":"type"},{"location":"api/#Affine","page":"API Reference","title":"Affine","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"ClassicCiphers.Ciphers.AffineCipher","category":"page"},{"location":"api/#ClassicCiphers.Ciphers.AffineCipher","page":"API Reference","title":"ClassicCiphers.Ciphers.AffineCipher","text":"AffineCipher{ENC} <: AbstractStreamCipherConfiguration{ENC}\n\nImplementation of the Affine cipher that applies the transformation E(x) = (ax + b) mod m where m is the alphabet size, a and b are the key parameters.\n\nType parameters\n\nENC::Bool: true for encryption, false for decryption\n\nFields\n\na::Int: Multiplicative coefficient (must be coprime with alphabet size)\nb::Int: Shift amount like in Caesar cipher\nalphabet_params::AlphabetParameters: Configuration for alphabet and case handling\n\n\n\n\n\n","category":"type"},{"location":"api/#XOR","page":"API Reference","title":"XOR","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"ClassicCiphers.Ciphers.XORCipher","category":"page"},{"location":"api/#ClassicCiphers.Ciphers.XORCipher","page":"API Reference","title":"ClassicCiphers.Ciphers.XORCipher","text":"XORCipher{ENC, T} <: AbstractStreamCipherConfiguration{ENC}\n\nImplementation of a XOR cipher that performs a bitwise XOR operation between message and key.\n\nType parameters\n\nENC::Bool: true for encryption, false for decryption\nT: Type of elements in the key vector\n\nFields\n\nkey::Vector{T}: The key used for XOR operation\n\n\n\n\n\n","category":"type"},{"location":"api/#Vigenere","page":"API Reference","title":"Vigenere","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"ClassicCiphers.Ciphers.VigenereCipher\nClassicCiphers.Ciphers.get_shift","category":"page"},{"location":"api/#ClassicCiphers.Ciphers.VigenereCipher","page":"API Reference","title":"ClassicCiphers.Ciphers.VigenereCipher","text":"VigenereCipher{ENC} <: AbstractStreamCipherConfiguration{ENC}\n\nVigenère cipher implementation that uses a keyword to encrypt/decrypt text. Each letter in the keyword determines the shift amount for the corresponding position in the text.\n\nType parameters\n\nENC::Bool: true for encryption, false for decryption\n\nFields\n\nkey::String: Keyword used for encryption/decryption\nalphabet_params::AlphabetParameters: Configuration for alphabet and case handling\n\n\n\n\n\n","category":"type"},{"location":"api/#ClassicCiphers.Ciphers.get_shift","page":"API Reference","title":"ClassicCiphers.Ciphers.get_shift","text":"get_shift(cipher::VigenereCipher, pos::Int)\n\nGet the shift value for the Vigenère cipher at the specified position in the key.\n\n\n\n\n\n","category":"function"},{"location":"api/#Vernam","page":"API Reference","title":"Vernam","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"ClassicCiphers.Ciphers.VernamCipher","category":"page"},{"location":"api/#ClassicCiphers.Ciphers.VernamCipher","page":"API Reference","title":"ClassicCiphers.Ciphers.VernamCipher","text":"VernamCipher{ENC} <: AbstractStreamCipherConfiguration{ENC}\n\nA structure representing the Vernam cipher, also known as the one-time pad.\n\nThe Vernam cipher is a symmetric stream cipher where each character of the plaintext is combined with a character from a random key stream using bitwise XOR operation. When used with a truly random key the same length as the message, it provides perfect secrecy.\n\nType Parameters\n\nENC: Encoding type parameter that specifies how the text should be encoded\n\nNotes\n\nThe key must be at least as long as the message to be encrypted\nEach key should be used only once\nThe key should be truly random for perfect secrecy\n\nSee also: AbstractStreamCipherConfiguration\n\n\n\n\n\n","category":"type"},{"location":"api/#Codes","page":"API Reference","title":"Codes","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"ClassicCiphers.Codes.MorseCode","category":"page"},{"location":"api/#ClassicCiphers.Codes.MorseCode","page":"API Reference","title":"ClassicCiphers.Codes.MorseCode","text":"MorseCode{ENC} <: AbstractStreamCipherConfiguration{ENC}\n\nImplementation of the Morse code that converts between alphanumeric text and Morse code. Uses \"/\" as a word separator and \" \" between letters.\n\nType parameters\n\nENC::Bool: true for encoding to Morse, false for decoding from Morse\n\nToDo\n\nAdd support for additional Morse code types\nInternational Morse code ITU-R M.1677-1\nAmerican Morse code\nContinental Morse code\nNavy Morse code\nTap code\n\n\n\n\n\n","category":"type"},{"location":"api/#Index","page":"API Reference","title":"Index","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"","category":"page"},{"location":"#ClassicCiphers.jl","page":"Home","title":"ClassicCiphers.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A Julia package implementing classical cryptographic ciphers with configurable alphabet and case handling.","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"ClassicCiphers.jl provides implementations of several classical ciphers:","category":"page"},{"location":"","page":"Home","title":"Home","text":"ROT13: A special case of Caesar cipher with shift=13\nCaesar cipher: Shifts each letter by a fixed amount\nAffine cipher: Combines multiplication and addition operations, using formula E(x) = (ax + b) mod m, where a and m are coprime\nSimple substitution cipher: Maps each letter to another using a provided mapping\nVigenère cipher: Uses a keyword to determine shifting patterns\nVernam cipher: Also known as the one-time pad","category":"page"},{"location":"","page":"Home","title":"Home","text":"All ciphers support configurable:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Case sensitivity\nCase preservation/conversion in output\nUnknown symbol handling\nCustom alphabets","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(\"ClassicCiphers\")","category":"page"},{"location":"#Quick-Start","page":"Home","title":"Quick Start","text":"","category":"section"},{"location":"#String-API","page":"Home","title":"String API","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Lets demonstrates the string processing API for the ClassicCiphers package by showing examples of both the Caesar cipher and Vigenère cipher implementations.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using ClassicCiphers\n\n# Create a Caesar cipher with default settings\ncipher = CaesarCipher(shift=3)\nplain_msg = \"HELLO\"\n## Cipher message\nciphered_msg = cipher(plain_msg)  # Returns \"KHOOR\"\n## Decipher message\nrecovered_msg = inv(cipher)(ciphered_msg)  # Returns \"HELLO\"\n\n## Custom shift value\ncipher = CaesarCipher(shift=5)","category":"page"},{"location":"","page":"Home","title":"Home","text":"The first example shows the basic usage of the Caesar cipher, which is one of the simplest substitution ciphers. It creates a cipher with a shift of 3 positions (the traditional shift used by Julius Caesar). When applied to the plaintext \"HELLO\", it shifts each letter forward by 3 positions in the alphabet, producing \"KHOOR\". The inverse operation (inv(cipher)) creates a decryption cipher that shifts letters backward by 3 positions, recovering the original message.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The code then shows how to customize the Caesar cipher by using a different shift value (5 instead of 3), demonstrating the configurable nature of the implementation.","category":"page"},{"location":"#Create-a-Vigenère-cipher-with-custom-case-handling","page":"Home","title":"Create a Vigenère cipher with custom case handling","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"params = AlphabetParameters(output_case_mode=PRESERVE_CASE)\ncipher = VigenereCipher(\"SECRET\", alphabet_params=params)\nciphered_msg = cipher(\"Hello World!\")  # Returns \"Zincs Pgvnu!\"\nrecovered_msg = inv(cipher)(ciphered_msg)  # Returns \"HELLO WORLD!\"","category":"page"},{"location":"","page":"Home","title":"Home","text":"This second example introduces the more complex Vigenère cipher, which uses a keyword (\"SECRET\" in this case) to create a polyalphabetic substitution. This example also demonstrates the case handling capabilities of the package through the AlphabetParameters configuration. By setting output_case_mode=PRESERVE_CASE, the cipher maintains the original case pattern of the input text - notice how \"Hello World!\" maintains its capitalization pattern in the encrypted output \"Zincs Pgvnu!\".","category":"page"},{"location":"","page":"Home","title":"Home","text":"Both examples showcase the consistent API design where:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Ciphers are created with their specific parameters\nEncryption is performed by calling the cipher as a function\nDecryption is achieved using the inv function to create a decryption cipher\nConfiguration options are passed through","category":"page"},{"location":"#Stream-API","page":"Home","title":"Stream API","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The Stream API allows processing text one character at a time, making it ideal for:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Large files that shouldn't be loaded entirely into memory\nReal-time encryption/decryption of streaming data\nChaining multiple ciphers together in a processing pipeline","category":"page"},{"location":"#Basic-Usage","page":"Home","title":"Basic Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"# Create cipher and stream wrapper\ncipher = CaesarCipher(shift=3)\nstream_cipher = StreamCipher(cipher)\n\n# Process individual characters\nfit!(stream_cipher, 'H')\nvalue(stream_cipher)  # Returns 'K'","category":"page"},{"location":"#Cipher-Chaining","page":"Home","title":"Cipher Chaining","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"# Create encryption and decryption streams\ncipher = CaesarCipher(shift=3)\ndecipher = inv(cipher)\nstream_cipher = StreamCipher(cipher)\nstream_decipher = StreamCipher(decipher)\n\n# Connect them into a pipeline\nconnect!(stream_decipher, stream_cipher)","category":"page"},{"location":"#File-Processing-Example","page":"Home","title":"File Processing Example","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"# Process a file character by character\nopen(\"input.txt\", \"r\") do input\n   open(\"output.txt\", \"w\") do output\n      for c in readeach(io, Char)\n         fit!(stream_decipher, c)\n         write(out, value(stream_decipher)) \n      end\n   end\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"The Stream API is built on Julia's OnlineStats.jl framework, providing:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Memory efficiency through incremental processing\nComposability through cipher chaining\nIntegration with Julia's IO system","category":"page"},{"location":"","page":"Home","title":"Home","text":"This makes it particularly useful for processing large texts or implementing real-time encryption systems.","category":"page"},{"location":"#Core-Types","page":"Home","title":"Core Types","text":"","category":"section"},{"location":"#AlphabetParameters","page":"Home","title":"AlphabetParameters","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Controls how the cipher handles alphabets and character transformations.","category":"page"},{"location":"","page":"Home","title":"Home","text":"struct AlphabetParameters{CASE_SENSITIVITY, CASE_MEMORIZATION, UNKNOWN_SYMBOL_HANDLING}\n    alphabet\n    case_sensitivity::CASE_SENSITIVITY\n    case_memorization::CASE_MEMORIZATION\n    unknown_symbol_handling::UNKNOWN_SYMBOL_HANDLING\nend","category":"page"},{"location":"","page":"Home","title":"Home","text":"Parameters:","category":"page"},{"location":"","page":"Home","title":"Home","text":"alphabet: Set of valid characters (default: A-Z)\ncase_sensitivity: Whether to distinguish between upper/lowercase\ncase_memorization: How to handle case in output\nunknown_symbol_handling: How to handle characters not in alphabet","category":"page"},{"location":"#Case-Handling-Options","page":"Home","title":"Case Handling Options","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Input case sensitivity:","category":"page"},{"location":"","page":"Home","title":"Home","text":"NOT_CASE_SENSITIVE: Treat upper/lowercase as same (default)\nCASE_SENSITIVE: Distinguish between upper/lowercase","category":"page"},{"location":"","page":"Home","title":"Home","text":"Output case modes:","category":"page"},{"location":"","page":"Home","title":"Home","text":"PRESERVE_CASE: Keep original case from input\nLOWERCASE_CASE: Convert all to lowercase\nUPPERCASE_CASE: Convert all to uppercase\nCCCASE: Crypto convention case (lowercase for encryption, uppercase for decryption)\nDEFAULT_CASE: Use case from output alphabet (default)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Unknown symbol modes:","category":"page"},{"location":"","page":"Home","title":"Home","text":"IGNORE_SYMBOL: Keep unknown symbols as-is (default)\nREMOVE_SYMBOL: Remove unknown symbols\nREPLACE_SYMBOL: Replace with '?'","category":"page"},{"location":"#Cipher-Implementations","page":"Home","title":"Cipher Implementations","text":"","category":"section"},{"location":"#CaesarCipher","page":"Home","title":"CaesarCipher","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Classic shift cipher that moves each letter a fixed number of positions.","category":"page"},{"location":"","page":"Home","title":"Home","text":"# Basic usage\ncipher = CaesarCipher(shift=3)\ncipher(\"HELLO\")  # Returns \"KHOOR\"\n\n# With custom alphabet parameters\nparams = AlphabetParameters(case_sensitive=true)\ncipher = CaesarCipher(shift=5, alphabet_params=params)","category":"page"},{"location":"#ROT13Cipher","page":"Home","title":"ROT13Cipher","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Special case of Caesar cipher with fixed shift of 13, making it self-inverse.","category":"page"},{"location":"","page":"Home","title":"Home","text":"cipher = ROT13Cipher()\nencrypted = cipher(\"HELLO\")  # Returns \"URYYB\"\ndecrypted = cipher(encrypted)  # Returns \"HELLO\"","category":"page"},{"location":"#SubstitutionCipher","page":"Home","title":"SubstitutionCipher","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Maps each character to another using a provided dictionary.","category":"page"},{"location":"","page":"Home","title":"Home","text":"mapping = Dict('A'=>'X', 'B'=>'Y', 'C'=>'Z')\ncipher = SubstitutionCipher(mapping)\ncipher(\"ABC\")  # Returns \"XYZ\"","category":"page"},{"location":"#VigenereCipher","page":"Home","title":"VigenereCipher","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Polyalphabetic substitution cipher using a keyword to determine shifts.","category":"page"},{"location":"","page":"Home","title":"Home","text":"cipher = VigenereCipher(\"SECRET\")\ncipher(\"HELLO\")  # Returns \"ZINCS\"\n\n# With case preservation\nparams = AlphabetParameters(output_case_mode=PRESERVE_CASE)\ncipher = VigenereCipher(\"SECRET\", alphabet_params=params)\ncipher(\"Hello\")  # Returns \"Zincs\"","category":"page"},{"location":"#Utility-Functions","page":"Home","title":"Utility Functions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"All ciphers support:","category":"page"},{"location":"","page":"Home","title":"Home","text":"inv(cipher): Create inverse cipher for decryption\nString and character-level operations: cipher(\"ABC\") or cipher('A')","category":"page"},{"location":"#Best-Practices","page":"Home","title":"Best Practices","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Case Handling: Consider your use case when configuring case sensitivity:\nFor maximum security: Use CASE_SENSITIVE\nFor traditional crypto: Use CCCASE\nFor user-friendly output: Use PRESERVE_CASE\nUnknown Symbols: Choose appropriate handling:\nFor maximum compatibility: Use IGNORE_SYMBOL\nFor clean output: Use REMOVE_SYMBOL\nFor error detection: Use REPLACE_SYMBOL\nCustom Alphabets: Ensure they:\nContain all required characters\nHave unique characters (checked with warning)\nMatch your case sensitivity settings","category":"page"},{"location":"#Examples","page":"Home","title":"Examples","text":"","category":"section"},{"location":"#Basic-Encryption/Decryption","page":"Home","title":"Basic Encryption/Decryption","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"# Caesar cipher with default settings\ncaesar = CaesarCipher(shift=3)\nmessage = \"THE QUICK BROWN FOX\"\nencrypted = caesar(message)\ndecrypted = inv(caesar)(encrypted)\n@assert decrypted == uppercase(message)\n\n# Vigenère cipher with case preservation\nparams = AlphabetParameters(output_case_mode=PRESERVE_CASE)\nvigenere = VigenereCipher(\"SECRET\", alphabet_params=params)\nmessage = \"Hello World!\"\nencrypted = vigenere(message)\ndecrypted = inv(vigenere)(encrypted)\n@assert decrypted == uppercase(message)","category":"page"},{"location":"#Custom-Alphabet","page":"Home","title":"Custom Alphabet","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"# Create custom alphabet with only uppercase letters A-M\nparams = AlphabetParameters(alphabet=collect('A':'M'))\ncipher = CaesarCipher(shift=3, alphabet_params=params)\n\n# Letters N-Z will be handled according to unknown_symbol_handling","category":"page"},{"location":"#Case-Sensitivity","page":"Home","title":"Case Sensitivity","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"# Case sensitive substitution\nparams = AlphabetParameters(case_sensitive=true)\nmapping = Dict('A'=>'X', 'a'=>'x', 'B'=>'Y', 'b'=>'y')\ncipher = SubstitutionCipher(mapping, alphabet_params=params)\n\ncipher(\"AaBb\")  # Returns \"XxYy\"\ncipher(\"AABB\")  # Returns \"XXYY\"","category":"page"},{"location":"#Testing","page":"Home","title":"Testing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The package includes comprehensive tests for all ciphers and configurations:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Test\nusing ClassicCiphers\n\n# Run all tests\n@testset \"ClassicCiphers.jl\" begin\n    include(\"test/runtests.jl\")\nend","category":"page"},{"location":"#Contributing","page":"Home","title":"Contributing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Contributions are welcome! Please:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Fork the repository\nCreate a feature branch\nAdd tests for new functionality\nEnsure all tests pass\nSubmit a pull request","category":"page"},{"location":"#License","page":"Home","title":"License","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This project is licensed under the MIT License.","category":"page"}]
}
